'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
cat(shellOutput, file=shellOutputFile, sep="\n")
#for (ourFile in list.files('StartingTrees', pattern='*.nex'))
ourFile <- "OZL_random.nex"
startTrees <- read.nexus(paste0("StartingTrees/", ourFile))
resultTrees <- lapply(seq_along(startTrees), function (i)
read.nexus(paste0(bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
resultTrees <- lapply(seq_along(startTrees), function (i)
read.nexus(paste0('/',bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
#for (ourFile in list.files('StartingTrees', pattern='*.nex'))
ourFile <- "OZL_random.nex"
startTrees <- read.nexus(paste0("StartingTrees/", ourFile))
resultTrees <- lapply(seq_along(startTrees), function (i)
read.nexus(paste0(bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
getwd()
bayesFilesDir <- 'MrBayes'
resultTrees <- lapply(seq_along(startTrees), function (i)
read.nexus(paste0(bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
bayesFilesDir <- '/MrBayes'
resultTrees <- lapply(seq_along(startTrees), function (i)
read.nexus(paste0(bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
resultTrees <- lapply(seq_along(startTrees), function (i)
read.nexus(paste0("./",bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
bayesFilesDir <- 'MrBayes'
outputDir <- 'Results'
mrBayesTemplateFile <- paste0(rootDir, '/', datasetName, '_TEMPLATE.nex')
# Select dataset
datasetName <- "OZL"
rootDir <- paste0("C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations/", datasetName)
setwd(rootDir)
if (!dir.exists('Results')) dir.create('Results')
idealTree <- read.nexus(paste0("./",datasetName, "_optimal_tree.nex"))
dataset <- ReadAsPhyDat(mrBayesTemplateFile)
#for (ourFile in list.files('StartingTrees', pattern='*.nex'))
ourFile <- "OZL_random.nex"
startTrees <- read.nexus(paste0("StartingTrees/", ourFile))
resultTrees <- lapply(seq_along(startTrees), function (i)
read.nexus(paste0("./",bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
i <- 1
paste0("./",bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")
resultTrees <- lapply(seq_along(startTrees), function (i)
read.nexus(paste0(rootdir,"/",bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
resultTrees <- lapply(seq_along(startTrees), function (i)
read.nexus(paste0(rootDir,"/",bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
#for (ourFile in list.files('StartingTrees', pattern='*.nex'))
ourFile <- "OZL_random.nex"
startTrees <- read.nexus(paste0("StartingTrees/", ourFile))
resultTrees <- lapply(seq_along(startTrees), function (i)
read.nexus(paste0(rootDir,"/",bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
file.exists(paste0(rootDir,"/",bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre"))
seq_along(startTrees)
resultTrees <- lapply(seq_along(startTrees), function (i),
read.nexus(paste0(rootDir,"/",bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
#resultTrees <- lapply(seq_along(startTrees), function (i)
#                      read.nexus(paste0(rootDir,"/",bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
resultTrees <- lapply(c(1:20), function(i)
read.nexus(paste0(rootDir,"/",bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
QStatuses <- vapply(
#seq_along(startTrees),
c(1:20),
function(i)
QuartetStatus(startTrees[[i]], resultTrees[[i]]),
c(N=0, Q=0, s=0, d=0, r1=0, r2=0, u=0)
)
startSim <- SimilarityMetrics(t(QStatuses))
write.csv(startSim, file=paste0('Results/', ourFile, '.start-sim.csv'))
idealStatuses <- QuartetStatus(resultTrees, cf=idealTree)
write.csv(SimilarityMetrics(idealStatuses), file=paste0('Results/', ourFile, '.ideal-sim.csv'))
startToIdealStatuses <- QuartetStatus(startTrees, cf=idealTree)
write.csv(SimilarityMetrics(startToIdealStatuses), file=paste0('Results/', ourFile, '.start-to-ideal-sim.csv'))
datasetName <- "OZL"
rootDir <- paste0("C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations/", datasetName)
setwd(rootDir)
shellTemplateFile <- '../shell_TEMPLATE.sh.txt'
shellTemplate <- readLines(shellTemplateFile)
shellDir <- "ShellScripts"
if (!dir.exists(shellDir)) dir.create(shellDir)
methods <- c("NNI_chain", "random", "single_NNI_move", "single_SPR_move", "single_TBR_move",
"SPR_chain", "TBR_chain")
m <- "NNI_chain"    ##set tree generation method
k <- 1
howManyTrees <- c(1:20)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(21:40)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(41:60)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(61:80)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(81:100)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(41:60)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex \n')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(41:60)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex\n')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
#calculate homoplasy indices from starting trees
require(TreeSearch)
require(ape)
require(phangorn)
# Define constants
nPart <- 4 #number of partitions
prop <- 1/nPart # proportion of characters per partition
insertionComment <- "INSERT PARTITIONS HERE"
bayesFilesDir <- 'MrBayes'
# Select dataset
datasetName <- "CEA"
rootDir <- paste0("C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations/", datasetName)
setwd(rootDir)
mrBayesTemplateFile <- paste0(rootDir, '/', datasetName, '_TEMPLATE.nex')
dataset <- ReadAsPhyDat(mrBayesTemplateFile)
# Mr Bayes template
mrBayesTemplate <- readLines(mrBayesTemplateFile)
insertLine <- grep(insertionComment, mrBayesTemplate)
if (!dir.exists(bayesFilesDir)) dir.create(bayesFilesDir)
powerOf2 <- 2^(0:ncol(attr(dataset, "contrast"))) #contrast shows the possible permutations of
#the character states, i.e. 0, 1, 2, 3, 4, 5, {01}, {02} etc.
decode <- apply(attr(dataset, "contrast"), 1, function(r) #
sum(powerOf2[as.logical(r)])
)
tab <- t(vapply(dataset, I, dataset[[1]])) # translates lists of taxa and character data into matrix
tab <- tab[, attr(dataset, 'index')]
nChar <- ncol(tab)
chars <- seq_len(nChar)
minSteps <- apply(tab, 2, function(char)
TreeSearch:::MinimumSteps(decode[char])
)
for (ourFile in list.files('StartingTrees', pattern='*.nex')) {
trees <- read.nexus(paste0('StartingTrees/', ourFile))
for (i in seq_along(trees)) {
tree <- trees[[i]]
parsScore <- Fitch(tree, dataset)
#calculate number to go in exp() for branch lengths prior
expVal <- ncol(tab)/parsScore
obsSteps <- FitchSteps(tree, dataset)
#calculate Goloboff's unbiased measure of homoplasy for a given k (concavity constant) and data set
k <- 3
f <- (k+1)/(obsSteps+k+1+minSteps)
#rank characters by homoplasy values and then divide equally into a number of partitions
mat <- rbind(chars, f) #combine char no. and homoplasy value into one matrix
sortedMat <- mat[, order(f)] #sort columns by homoplasy (f) in ascending order
chunk <- round(prop * nChar) # number of characters per partition
partA <- sortedMat[1, 1:chunk]
partB <- sortedMat[1, (chunk+1) : (2*chunk)]
partC <- sortedMat[1, (2*chunk+1):(3*chunk)]
partD <- sortedMat[1, (3*chunk +1) : nChar]
mrBayesOutput <- c(mrBayesTemplate[seq_len(insertLine - 1)],
paste("charset partA =", paste(partA, collapse=' '), ";"),
paste("charset partB =", paste(partB, collapse=' '), ";"),
paste("charset partC =", paste(partC, collapse=' '), ";"),
paste("charset partD =", paste(partD, collapse=' '), ";"),
"",
"partition chartype=4: partA, partB, partC, partD;",
"set partition=chartype;",
"",
mrBayesTemplate[(insertLine + 1L):length(mrBayesTemplate)])
outputFile <- paste0(bayesFilesDir, '/', ourFile, '.', i, '.nex')
writeLines(mrBayesOutput, outputFile)
}
}
datasetName <- "CEA"
rootDir <- paste0("C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations/", datasetName)
setwd(rootDir)
shellTemplateFile <- '../shell_TEMPLATE.sh.txt'
shellTemplate <- readLines(shellTemplateFile)
shellDir <- "ShellScripts"
if (!dir.exists(shellDir)) dir.create(shellDir)
methods <- c("NNI_chain", "random", "single_NNI_move", "single_SPR_move", "single_TBR_move",
"SPR_chain", "TBR_chain")
m <- "NNI_chain"    ##set tree generation method
k <- 1
howManyTrees <- c(1:21)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(1:20)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(21:40)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(41:60)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(61:80)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(81:100)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
datasetName <- "CEA"
rootDir <- paste0("C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations/", datasetName)
setwd(rootDir)
shellTemplateFile <- '../shell_TEMPLATE.sh.txt'
shellTemplate <- readLines(shellTemplateFile)
shellDir <- "ShellScripts"
if (!dir.exists(shellDir)) dir.create(shellDir)
methods <- c("NNI_chain", "random", "single_NNI_move", "single_SPR_move", "single_TBR_move",
"SPR_chain", "TBR_chain")
m <- "TBR_chain"    ##set tree generation method
k <- 1
howManyTrees <- c(1:20)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(21:40)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(41:60)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(61:80)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(81:100)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
m <- "random"    ##set tree generation method
k <- 1
howManyTrees <- c(1:20)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(21:40)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(41:60)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(61:80)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
k <- 1
howManyTrees <- c(81:100)
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
