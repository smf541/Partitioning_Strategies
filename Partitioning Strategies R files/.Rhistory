hyochars <- read.csv("./HyolithCharacters.csv")
input.dataset <- "./HyolithCharacters.csv"
hyochars <- read.csv(input.dataset)
data.set <- read.csv(input.dataset)
#get partition names
partition.levels <- levels(data.set$neomorphic.transformational)
get.levels <- function(part.strat) {
partition.levels <- levels(data.set$part.strat)
}
get.levels(body.region)
body.region.levels <- get.levels(body.region)
data.set$body.region
part.strat <- body.region
part.strat <- "body.region"
data.set$part.strat
part.strat <- c("body.region")
data.set$part.strat[1]
body.region.levels <- get.levels(body.region)
View(data.set)
hyochars %>% sapply(levels)
library(dplyr)
require(dplyr)
install.packages("dplyr")
hyochars %>% sapply(levels)
require(dplyr)
hyochars %>% sapply(levels)
get.levels.2 <- function(part.strat) {
hyochars$part.strat %>% sapply(levels)
}
get.levels.2(body.region)
get.levels.2 <- function(part.strat) {
paste("hyochars$", part.strat, sep="") %>% sapply(levels)
}
get.levels.2(body.region)
get.levels.2("body.region")
paste("hyochars$", part.strat, sep="")
parse(text=paste("hyochars$", part.strat, sep=""))
get.levels.2 <- function(part.strat) {
parse(text=paste("hyochars$", part.strat, sep="")) %>% sapply(levels)
}
get.levels.2("body.region")
get.levels.2 <- function(part.strat) {
eval(parse(text=paste("hyochars$", part.strat, sep=""))) %>% sapply(levels)
}
get.levels.2("body.region")
get.levels.2 <- function(part.strat) {
as.vector(eval(parse(text=paste("hyochars$", part.strat, sep="")))) %>% sapply(levels)
}
get.levels.2("body.region")
quote(paste0("hyochars$", part.strat, sep=""))
paste0("hyochars$", part.strat, sep="")
eval(paste0("hyochars$", part.strat, sep=""))
as.name(paste0("hyochars$", part.strat, sep=""))
get.levels.2 <- function(part.strat) {
as.name(paste0("hyochars$", part.strat, sep="")) %>% sapply(levels)
}
get.levels.2("body.region")
get.levels.2 <- function(part.strat) {
column.name <- as.name(paste0("hyochars$", part.strat, sep=""))
column.name %>% sapply(levels)
}
get.levels.2("body.region")
column.name
column.name
column.name <- as.name(paste0("hyochars$", part.strat, sep=""))
get.levels.2 <- function(part.strat) {
column.name <- as.name(paste0("hyochars$", part.strat, sep=""))
levels(column.name)
}
get.levels.2("body.region")
get.char.vector <- function(level) {
hyochars$char.no[hyochars$neomorphic.transformational==level]
}
sapply(partition.levels,
FUN=get.char.vector)
partition.levels <- levels(data.set$body.region)
#input data
input.dataset <- "./HyolithCharacters.csv"
data.set <- read.csv(input.dataset)
partition.levels <- levels(data.set$body.region)
part1 <- "body.region"
partition.levels <- levels(data.set$part1)
partition.levels.1 <- levels(data.set$part1)
#input data
input.dataset <- "./HyolithCharacters.csv"
data.set <- read.csv(input.dataset)
part1 <- "body.region"
partition.levels.1 <- levels(data.set$part1)
data.set$part1
paste0("data.set$", part1)
as.name(paste0("data.set$", part1))
levels(as.name(paste0("data.set$", part1)))
substitute(paste0("data.set$", part1))
quote(paste0("data.set$", part1))
type(data.set$body.region)
is.vector(data.set$body.region)
is(data.set$body.region)
#get vector of character no. for each partition name
get.char.vector <- function(partition) {
partition.levels <- levels(data.set$partition)
sapply(partition.levels,
FUN=function(level) {
hyochars$char.no[hyochars$neomorphic.transformational==level]
})
}
part1 <- "body.region"
partition.levels.1 <- levels(quote(paste0("data.set$", part1)))
#more abstracted
get.char.vector2 <- function(level, part.strat) { #level == which partition's vector I want
hyochars$char.no[hyochars$part.strat==level]    #part.strat == the partitioning strategy the level is from
}
get.char.vector2("transformational", part.strat = "neomorphic.transformational")
#more abstracted
get.char.vector2 <- function(level, part.strat) { #level == which partition's vector I want
data.set$char.no[data.set$part.strat==level]    #part.strat == the partitioning strategy the level is from
}
get.char.vector2("transformational", part.strat = "neomorphic.transformational")
#get vector of character no. for each partition name
get.char.vector <- function(partition) {
partition.levels <- levels(data.set$partition)
sapply(partition.levels,
FUN=function(level) {
data.set$char.no[data.set$partition==level]
})
}
get(paste0("data.set$", part1))
get("data.set$body.region")
#try out get()
tryget <- function(df) {
get(df)
}
tryget("data.set")
tryget("data.set$body.region")
tryget("data.set[8]")
paste0("data.set$", part1)
get(paste0("data.set$", part1))
data.set$body.region
get(data.set$body.region)
get("data.set$body.region")
input.dataset <- "./HyolithCharacters.csv"
data.set <- read.csv(input.dataset)
#get partition names
partition.levels.neotrans <- levels(data.set$neomorphic.transformational)
get.char.vector <- function(level) {
data.set$char.no[data.set$neomorphic.transformational==level]
}
sapply(partition.levels,
FUN=get.char.vector)
#get partition names
partition.levels <- levels(data.set$neomorphic.transformational)
sapply(partition.levels,
FUN=get.char.vector)
is(sapply(partition.levels,
FUN=get.char.vector))
as.array(sapply(partition.levels,
FUN=get.char.vector))
char.vector.array <- as.array(sapply(partition.levels,
FUN=get.char.vector))
is(char.vector.array)
View(char.vector.array)
is.array(sapply(partition.levels,
FUN=get.char.vector))
is.array(as.array(sapply(partition.levels,
FUN=get.char.vector)))
char.vector.list <- sapply(partition.levels,
FUN=get.char.vector)
View(char.vector.list)
char.vector.array <- as.array(sapply(partition.levels,
FUN=get.char.vector))
is.array(char.vector.list)
is.array(char.vector.array)
#get partition names
partition.levels <- levels(data.set$body.region)  #change column name
get.char.vector <- function(level) {
data.set$char.no[data.set$body.region==level] #change column name
}
#output as array
char.vector.array <- as.array(sapply(partition.levels,
FUN=get.char.vector))
View(char.vector.array)
#print results
print(char.vector.array[1])
#print results
print(char.vector.array[2])
#print results
print(char.vector.array[3])
#print results
print(char.vector.array[4])
#print results
print(char.vector.array[5])
#print results
print(char.vector.array[6])
#print results
print(char.vector.array[7])
#print results
print(char.vector.array[8])
