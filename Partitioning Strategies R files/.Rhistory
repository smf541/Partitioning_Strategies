startToIdealStatuses <- QuartetStatus(startTrees, cf=idealTree)
write.csv(SimilarityMetrics(startToIdealStatuses), file=paste0('Results/', ourFile, '.start-to-published-sim.csv'))
#read in excel file
rootDir <-"C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations"
setwd(paste0(rootDir, '/', dataSet, '/', 'Results'))
file <- paste0(dataSet, '_', perturbMove, '.nex.', baseTree, '-sim.csv')  #e.g. SYL_random.nex.ideal-sim.csv
data <- read.csv(file, skip=0, header=TRUE)
StartTree <- data$X
QuartetDivergence <- data$QuartetDivergence
QD <- data.frame(StartTree, QuartetDivergence)
#convert data from wide to long
QD$StartTree <- factor(QD$StartTree)
QD$QuartetDivergence <- as.numeric(QD$QuartetDivergence)
QD$QuartetDivergence <- round(QD$QuartetDivergence, 2)
ggplot(data=QD) +
geom_point(aes(x=StartTree, y=QuartetDivergence)) + # aes(colour=`type of tree`)
#  facet_wrap(~ Metric) +
scale_y_continuous(name='Quartet Divergence', limits = c(0,1)) +
scale_x_discrete(name = paste0('Distance from ', baseTree, 'tree'),breaks = c(1,10,20,30,40,50,60,70,80,90,100), limits=c(1:100)) +
ggtitle(paste0(dataSet,' Similarity of Bayesian result tree to ', baseTree, ' tree')) #+
ggsave(filename=paste0(dataSet,'_',perturbMove,'_QD_vs_', baseTree,'.pdf'), path="C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations/SimPlots")
#calculate homoplasy indices from starting trees
require(TreeSearch)
require(ape)
require(phangorn)
# Define constants
nPart <- 4 #number of partitions
prop <- 1/nPart # proportion of characters per partition
insertionComment <- "INSERT PARTITIONS HERE"
bayesFilesDir <- 'MrBayes'
# Select dataset
datasetName <- "OZL"
rootDir <- paste0("C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations/", datasetName)
setwd(rootDir)
mrBayesTemplateFile <- paste0(rootDir, '/', datasetName, '_TEMPLATE.nex')
dataset <- ReadAsPhyDat(mrBayesTemplateFile)
# Mr Bayes template
mrBayesTemplate <- readLines(mrBayesTemplateFile)
insertLine <- grep(insertionComment, mrBayesTemplate)
if (!dir.exists(bayesFilesDir)) dir.create(bayesFilesDir)
powerOf2 <- 2^(0:ncol(attr(dataset, "contrast"))) #contrast shows the possible permutations of
#the character states, i.e. 0, 1, 2, 3, 4, 5, {01}, {02} etc.
decode <- apply(attr(dataset, "contrast"), 1, function(r) #
sum(powerOf2[as.logical(r)])
)
tab <- t(vapply(dataset, I, dataset[[1]])) # translates lists of taxa and character data into matrix
tab <- tab[, attr(dataset, 'index')]
nChar <- ncol(tab)
chars <- seq_len(nChar)
minSteps <- apply(tab, 2, function(char)
TreeSearch:::MinimumSteps(decode[char])
)
#make MrBayes files from perturbed trees
for (ourFile in list.files('StartingTrees', pattern='*.nex')) {
trees <- read.nexus(paste0('StartingTrees/', ourFile))
for (i in seq_along(trees)) {
tree <- trees[[i]]
parsScore <- Fitch(tree, dataset)
#calculate number to go in exp() for branch lengths prior
expVal <- ncol(tab)/parsScore
obsSteps <- FitchSteps(tree, dataset)
obsSteps <- obsSteps[attr(dataset, 'index')] #if two characters have the same profile, they are now not collapsed into one
#calculate Goloboff's unbiased measure of homoplasy for a given k (concavity constant) and data set
k <- 3
f <- (k+1)/(obsSteps+k+1+minSteps)
#rank characters by homoplasy values and then divide equally into a number of partitions
mat <- rbind(chars, f) #combine char no. and homoplasy value into one matrix
sortedMat <- mat[, order(f)] #sort columns by homoplasy (f) in ascending order
chunk <- round(prop * nChar) # number of characters per partition
partA <- sortedMat[1, 1:chunk]
partB <- sortedMat[1, (chunk+1) : (2*chunk)]
partC <- sortedMat[1, (2*chunk+1):(3*chunk)]
partD <- sortedMat[1, (3*chunk +1) : nChar]
mrBayesOutput <- c(mrBayesTemplate[seq_len(insertLine - 1)],
paste("prset brlenspr = unconstrained: exp(",expVal, ");"),
paste("charset partA =", paste(partA, collapse=' '), ";"),
paste("charset partB =", paste(partB, collapse=' '), ";"),
paste("charset partC =", paste(partC, collapse=' '), ";"),
paste("charset partD =", paste(partD, collapse=' '), ";"),
"",
"partition chartype=4: partA, partB, partC, partD;",
"set partition=chartype;",
"",
mrBayesTemplate[(insertLine + 1L):length(mrBayesTemplate)])
outputFile <- paste0(bayesFilesDir, '/', ourFile, '.', i, '.nex')
writeLines(mrBayesOutput, outputFile)
}
}
mrBayesTemplateFile <- paste0(rootDir, '/', datasetName, '_TEMPLATE.nex')
dataset <- ReadAsPhyDat(mrBayesTemplateFile)
# Mr Bayes template
mrBayesTemplate <- readLines(mrBayesTemplateFile)
insertLine <- grep(insertionComment, mrBayesTemplate)
if (!dir.exists(bayesFilesDir)) dir.create(bayesFilesDir)
powerOf2 <- 2^(0:ncol(attr(dataset, "contrast"))) #contrast shows the possible permutations of
#the character states, i.e. 0, 1, 2, 3, 4, 5, {01}, {02} etc.
decode <- apply(attr(dataset, "contrast"), 1, function(r) #
sum(powerOf2[as.logical(r)])
)
tab <- t(vapply(dataset, I, dataset[[1]])) # translates lists of taxa and character data into matrix
tab <- tab[, attr(dataset, 'index')]
nChar <- ncol(tab)
chars <- seq_len(nChar)
minSteps <- apply(tab, 2, function(char)
TreeSearch:::MinimumSteps(decode[char])
)
#make MrBayes files from perturbed trees
for (ourFile in list.files('StartingTrees', pattern='*.nex')) {
trees <- read.nexus(paste0('StartingTrees/', ourFile))
for (i in seq_along(trees)) {
tree <- trees[[i]]
parsScore <- Fitch(tree, dataset)
#calculate number to go in exp() for branch lengths prior
expVal <- ncol(tab)/parsScore
obsSteps <- FitchSteps(tree, dataset)
obsSteps <- obsSteps[attr(dataset, 'index')] #if two characters have the same profile, they are now not collapsed into one
#calculate Goloboff's unbiased measure of homoplasy for a given k (concavity constant) and data set
k <- 3
f <- (k+1)/(obsSteps+k+1+minSteps)
#rank characters by homoplasy values and then divide equally into a number of partitions
mat <- rbind(chars, f) #combine char no. and homoplasy value into one matrix
sortedMat <- mat[, order(f)] #sort columns by homoplasy (f) in ascending order
chunk <- round(prop * nChar) # number of characters per partition
partA <- sortedMat[1, 1:chunk]
partB <- sortedMat[1, (chunk+1) : (2*chunk)]
partC <- sortedMat[1, (2*chunk+1):(3*chunk)]
partD <- sortedMat[1, (3*chunk +1) : nChar]
mrBayesOutput <- c(mrBayesTemplate[seq_len(insertLine - 1)],
paste("prset brlenspr = unconstrained: exp(",expVal, ");"),
paste("charset partA =", paste(partA, collapse=' '), ";"),
paste("charset partB =", paste(partB, collapse=' '), ";"),
paste("charset partC =", paste(partC, collapse=' '), ";"),
paste("charset partD =", paste(partD, collapse=' '), ";"),
"",
"partition chartype=4: partA, partB, partC, partD;",
"set partition=chartype;",
"",
mrBayesTemplate[(insertLine + 1L):length(mrBayesTemplate)])
outputFile <- paste0(bayesFilesDir, '/', ourFile, '.', i, '.nex')
writeLines(mrBayesOutput, outputFile)
}
}
#comparing trees using similarity metrics
require(ape)
require(phytools)
require(Quartet)
require(phangorn)
require(TreeSearch)
# Define constants
bayesFilesDir <- 'MrBayes'
# Select dataset
datasetName <- "SYL"
rootDir <- paste0("C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations/", datasetName)
setwd(rootDir)
if (!dir.exists('Results')) dir.create('Results')
idealTree <- read.nexus(paste0("./",datasetName, "_optimal_tree.nex"))
for (ourFile in list.files('StartingTrees', pattern='*.nex')) {
#ourFile <- list.files('StartingTrees',pattern='*.nex')[2]  ##specify perturbation method (if one of the sets of results isn't complete)
startTrees <- read.nexus(paste0("StartingTrees/", ourFile))
resultTrees <- lapply(c(1:100), function (i)  #####works only if there are 100 con.tre's
read.nexus(paste0(rootDir,"/",bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
# if not 100 trees are used, specify the range of trees in lapply(c(...))
#resultTrees <- lapply(c(1:20), function(i)
#                      read.nexus(paste0(rootDir,"/",bayesFilesDir, "/", ourFile, '.', i,".nex.con.tre")))
####result trees must be located in dir mutations/datasetName/MrBayes
QStatuses <- vapply(
seq_along(startTrees),
function(i)
QuartetStatus(startTrees[[i]], resultTrees[[i]]),
c(N=0, Q=0, s=0, d=0, r1=0, r2=0, u=0)
)
startSim <- SimilarityMetrics(t(QStatuses))
write.csv(startSim, file=paste0('Results/', ourFile, '.start-sim.csv'))
idealStatuses <- QuartetStatus(resultTrees, cf=idealTree)
write.csv(SimilarityMetrics(idealStatuses), file=paste0('Results/', ourFile, '.published-sim.csv'))
startToIdealStatuses <- QuartetStatus(startTrees, cf=idealTree)
write.csv(SimilarityMetrics(startToIdealStatuses), file=paste0('Results/', ourFile, '.start-to-published-sim.csv'))
}
c(1:100)
paste0(dataSet,'_',perturbMove,'*.out')
#packages
require(readxl)
require(ggplot2)
require(tidyr)
require(utils)
#set dataset and perturbation move
dataSet <- "SCO"              #CEA, OZL, SCO, SYL, THER
perturbMove <- "NNI_chain"       #random, NNI_chain, TBR_chain
#read in .out file
rootDir <-"C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations"
setwd(paste0(rootDir, '/', dataSet, '/', 'MrBayes'))
treeNo <- c(1:100)
paste0(dataSet,'_',perturbMove,'*.out')
list.files(pattern=paste0(dataSet,'_',perturbMove,'*.out'))
list.files(pattern='*.out'))
list.files(pattern='*.out')
pattern=paste0(dataSet,'[:punct:]',perturbMove,'.out')
paste0(dataSet,'[:punct:]',perturbMove,'.out')
list.files(pattern=paste0(dataSet,'[:punct:]',perturbMove,'.out'))
list.files(pattern=paste0(perturbMove,'.out'))
list.files(pattern=paste0(dataSet,'[:punct:]',perturbMove))
list.files(pattern=paste0(dataSet))
list.files(pattern=paste0(dataSet, '[:punct:]'))
list.files(pattern=paste0(dataSet, '_'))
list.files(pattern=paste0(dataSet, '_', perturbMove))
list.files(pattern=paste0(dataSet, '_', perturbMove, '.+out'))
#to go into for loop
ourFile <- 'SCO_NNI_chain.nex_varExpVal_1to20.out'
outFiles <- readLines(ourFile)
require(TreeSearch)
require(ape)
require(phangorn)
# Define constants
nPart <- 4 #number of partitions
prop <- 1/nPart # proportion of characters per partition
insertionComment <- "INSERT PARTITIONS HERE"
bayesFilesDir <- 'MrBayes'
# Select dataset
datasetName <- "CEA"
rootDir <- paste0("C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations/", datasetName)
setwd(rootDir)
mrBayesTemplateFile <- paste0(rootDir, '/', datasetName, '_TEMPLATE.nex')
dataset <- ReadAsPhyDat(mrBayesTemplateFile)
# Mr Bayes template
mrBayesTemplate <- readLines(mrBayesTemplateFile)
insertLine <- grep(insertionComment, mrBayesTemplate)
if (!dir.exists(bayesFilesDir)) dir.create(bayesFilesDir)
powerOf2 <- 2^(0:ncol(attr(dataset, "contrast"))) #contrast shows the possible permutations of
#the character states, i.e. 0, 1, 2, 3, 4, 5, {01}, {02} etc.
decode <- apply(attr(dataset, "contrast"), 1, function(r) #
sum(powerOf2[as.logical(r)])
)
tab <- t(vapply(dataset, I, dataset[[1]])) # translates lists of taxa and character data into matrix
tab <- tab[, attr(dataset, 'index')]
nChar <- ncol(tab)
chars <- seq_len(nChar)
minSteps <- apply(tab, 2, function(char)
TreeSearch:::MinimumSteps(decode[char])
)
#make MrBayes files from perturbed trees
for (ourFile in list.files('StartingTrees', pattern='*.nex')) {
trees <- read.nexus(paste0('StartingTrees/', ourFile))
for (i in seq_along(trees)) {
tree <- trees[[i]]
parsScore <- Fitch(tree, dataset)
#calculate number to go in exp() for branch lengths prior
expVal <- ncol(tab)/parsScore
obsSteps <- FitchSteps(tree, dataset)
obsSteps <- obsSteps[attr(dataset, 'index')] #if two characters have the same profile, they are now not collapsed into one
#calculate Goloboff's unbiased measure of homoplasy for a given k (concavity constant) and data set
k <- 3
f <- (k+1)/(obsSteps+k+1+minSteps)
#rank characters by homoplasy values and then divide equally into a number of partitions
mat <- rbind(chars, f) #combine char no. and homoplasy value into one matrix
sortedMat <- mat[, order(f)] #sort columns by homoplasy (f) in ascending order
chunk <- round(prop * nChar) # number of characters per partition
partA <- sortedMat[1, 1:chunk]
partB <- sortedMat[1, (chunk+1) : (2*chunk)]
partC <- sortedMat[1, (2*chunk+1):(3*chunk)]
partD <- sortedMat[1, (3*chunk +1) : nChar]
mrBayesOutput <- c(mrBayesTemplate[seq_len(insertLine - 1)],
paste("prset brlenspr = unconstrained: exp(",expVal, ");"),
paste("charset partA =", paste(partA, collapse=' '), ";"),
paste("charset partB =", paste(partB, collapse=' '), ";"),
paste("charset partC =", paste(partC, collapse=' '), ";"),
paste("charset partD =", paste(partD, collapse=' '), ";"),
"",
"partition chartype=4: partA, partB, partC, partD;",
"set partition=chartype;",
"",
mrBayesTemplate[(insertLine + 1L):length(mrBayesTemplate)])
outputFile <- paste0(bayesFilesDir, '/', ourFile, '.', i, '.nex')
writeLines(mrBayesOutput, outputFile)
}
}
datasetName <- "CEA"
rootDir <- paste0("C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations/", datasetName)
setwd(rootDir)
shellTemplateFile <- '../shell_TEMPLATE.sh.txt'
shellTemplate <- readLines(shellTemplateFile)
shellDir <- "ShellScripts"
if (!dir.exists(shellDir)) dir.create(shellDir)
m <- "NNI_chain"    ##set tree generation method
chunk1 <- c(1:20)
chunk2 <- c(21:40)
chunk3 <- c(41:60)
chunk4 <- c(61:80)
chunk5 <- c(81:100)
chunks <- list(chunk1, chunk2, chunk3, chunk4, chunk5)
for (howManyTrees in chunks) {
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,'_',m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
}
m <- "random"    ##set tree generation method
chunk1 <- c(1:20)
chunk2 <- c(21:40)
chunk3 <- c(41:60)
chunk4 <- c(61:80)
chunk5 <- c(81:100)
chunks <- list(chunk1, chunk2, chunk3, chunk4, chunk5)
for (howManyTrees in chunks) {
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,'_',m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
}
m <- "TBR_chain"    ##set tree generation method
chunk1 <- c(1:20)
chunk2 <- c(21:40)
chunk3 <- c(41:60)
chunk4 <- c(61:80)
chunk5 <- c(81:100)
chunks <- list(chunk1, chunk2, chunk3, chunk4, chunk5)
for (howManyTrees in chunks) {
lines <- character(length(howManyTrees))
for (k in 1:length(howManyTrees)) {
lines[k] <- paste0('mpirun -n $SLURM_NTASKS mb /ddn/data/dxsb43/mutate',datasetName,
'/',datasetName,'_',m,'/',datasetName,'_',m,'.nex.',howManyTrees[k],'.nex')
}
shellOutput <- c(shellTemplate,
lines,
""
)
shellOutputFile <- paste0(shellDir, '/', datasetName, '_',m,'_', min(howManyTrees), '_', max(howManyTrees),
'.sh')  ##name of .sh file
#cat(shellOutput, file=shellOutputFile, sep="\n")
writeLines(shellOutput, shellOutputFile, sep="\n")
}
require(TreeSearch)
require(ape)
require(phangorn)
# Define constants
nPart <- 4 #number of partitions
prop <- 1/nPart # proportion of characters per partition
insertionComment <- "INSERT PARTITIONS HERE"
bayesFilesDir <- 'MrBayes'
# Select dataset
datasetName <- "CEA"
rootDir <- paste0("C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations/", datasetName)
setwd(rootDir)
mrBayesTemplateFile <- paste0(rootDir, '/', datasetName, '_TEMPLATE.nex')
dataset <- ReadAsPhyDat(mrBayesTemplateFile)
# Mr Bayes template
mrBayesTemplate <- readLines(mrBayesTemplateFile)
insertLine <- grep(insertionComment, mrBayesTemplate)
if (!dir.exists(bayesFilesDir)) dir.create(bayesFilesDir)
powerOf2 <- 2^(0:ncol(attr(dataset, "contrast"))) #contrast shows the possible permutations of
#the character states, i.e. 0, 1, 2, 3, 4, 5, {01}, {02} etc.
decode <- apply(attr(dataset, "contrast"), 1, function(r) #
sum(powerOf2[as.logical(r)])
)
tab <- t(vapply(dataset, I, dataset[[1]])) # translates lists of taxa and character data into matrix
tab <- tab[, attr(dataset, 'index')]
nChar <- ncol(tab)
chars <- seq_len(nChar)
minSteps <- apply(tab, 2, function(char)
TreeSearch:::MinimumSteps(decode[char])
)
#make MrBayes files from perturbed trees
for (ourFile in list.files('StartingTrees', pattern='*.nex')) {
trees <- read.nexus(paste0('StartingTrees/', ourFile))
for (i in seq_along(trees)) {
tree <- trees[[i]]
parsScore <- Fitch(tree, dataset)
#calculate number to go in exp() for branch lengths prior
expVal <- ncol(tab)/parsScore
obsSteps <- FitchSteps(tree, dataset)
obsSteps <- obsSteps[attr(dataset, 'index')] #if two characters have the same profile, they are now not collapsed into one
#calculate Goloboff's unbiased measure of homoplasy for a given k (concavity constant) and data set
k <- 3
f <- (k+1)/(obsSteps+k+1+minSteps)
#rank characters by homoplasy values and then divide equally into a number of partitions
mat <- rbind(chars, f) #combine char no. and homoplasy value into one matrix
sortedMat <- mat[, order(f)] #sort columns by homoplasy (f) in ascending order
chunk <- round(prop * nChar) # number of characters per partition
partA <- sortedMat[1, 1:chunk]
partB <- sortedMat[1, (chunk+1) : (2*chunk)]
partC <- sortedMat[1, (2*chunk+1):(3*chunk)]
partD <- sortedMat[1, (3*chunk +1) : nChar]
mrBayesOutput <- c(mrBayesTemplate[seq_len(insertLine - 1)],
paste("prset brlenspr = unconstrained: exp(",expVal, ");"),
paste("charset partA =", paste(partA, collapse=' '), ";"),
paste("charset partB =", paste(partB, collapse=' '), ";"),
paste("charset partC =", paste(partC, collapse=' '), ";"),
paste("charset partD =", paste(partD, collapse=' '), ";"),
"",
"partition chartype=4: partA, partB, partC, partD;",
"set partition=chartype;",
"",
mrBayesTemplate[(insertLine + 1L):length(mrBayesTemplate)])
outputFile <- paste0(bayesFilesDir, '/', ourFile, '.', i, '.nex')
writeLines(mrBayesOutput, outputFile)
}
}
rootDir <-"C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations"
inDir <- "SCO"
setwd(paste0(rootDir, inDir))
setwd(paste0(rootDir,'/', inDir))
fl = list.files(inDir, full.names=TRUE)
fl = list.files(full.names=TRUE)
fl = list.files("MrBayes",full.names=TRUE)
#list filenames
oldNames = list.files("MrBayes",full.names=FALSE)
rootDir <-"C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations"
inDir <- "SCO"
setwd(paste0(rootDir,'/', inDir))
if (!dir.exists("MrBayesRenamed")) dir.create("MrBayesRenamed")
#list filenames
oldNames = list.files("MrBayes",full.names=FALSE)
newDir <- "MrBayesRenamed"
oldDir <- "MrBayes"
file.copy(from=oldDir, to=newDir)
if (!dir.exists(newDir)) dir.create(newDir)
file.copy(from=oldDir, to=newDir)
file.copy(from=paste0('/',oldDir), to=paste0('/',newDir))
file.copy(oldNames,from=paste0('/',oldDir), to=paste0('/',newDir))
#list filenames
oldNames <- list.files("MrBayes",full.names=FALSE)
#list filenames
oldNames <- list.files("MrBayesRenamed",full.names=TRUE)
# rename files to consistent format
require(stringr)
rootDir <-"C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations"
inDir <- "SCO"
setwd(paste0(rootDir,'/', inDir))
newDir <- "MrBayesRenamed"
if (!dir.exists(newDir)) dir.create(newDir)
#list filenames
oldNames <- list.files("MrBayesRenamed",full.names=TRUE)
#construct new filenames
pattern <- '_varExpVal'
newNames <- str_replace(oldNames,pattern, '')  ##remove the _varExpVal
#rename files
file.rename(from=oldNames, to=newNames)
#list filenames
oldNames <- list.files("MrBayes",full.names=TRUE)
#construct new filenames
pattern <- '_varExpVal'
newNames <- str_replace(oldNames,pattern, '')  ##remove the _varExpVal
#rename files
file.rename(from=oldNames, to=newNames)
#to go into the for loop
ourFile <- 'SCO_NNI_chain_1to20.out'
outFiles <- readLines(ourFile)
#set dataset and perturbation move
dataSet <- "SCO"              #CEA, OZL, SCO, SYL, THER
perturbMove <- "NNI_chain"       #random, NNI_chain, TBR_chain
#read in .out file
rootDir <-"C:/local/dxsb43/GitHub/Partitioning_Strategies/mutations"
setwd(paste0(rootDir, '/', dataSet, '/', 'MrBayes'))
#to go into the for loop
ourFile <- 'SCO_NNI_chain_1to20.out'
outFiles <- readLines(ourFile)
outFile <- readLines(ourFile)
require(stringr)
setwd(paste0(rootDir, '/', dataSet, '/', 'MrBayesExperimental'))
#to go into the for loop
ourFile <- 'SCO_NNI_chain_1to20.out'
outFile <- readLines(ourFile)
#to go into the for loop
ourFile <- 'SCO_NNI_chain_1to20.out'
outFile <- readLines(ourFile)
#find title of nexus file within output
str_extract_all(outFile,"Executing file .+nex")
paste0('Executing file \\"/ddn/data/dxsb43/mutate',dataSet,'/',dataSet,'_',perturbMove,'/',dataSet,'_',perturbMove,'.nex_varExpVal.1.nex\\"')
paste0('Executing file ./ddn/data/dxsb43/mutate',dataSet,'/',dataSet,'_',perturbMove,'/',dataSet,'_',perturbMove,'.nex_varExpVal.1.nex.')
#find title of nexus file within output
str_extract_all(outFile,paste0('Executing file ./ddn/data/dxsb43/mutate',dataSet,'/',dataSet,'_',perturbMove,'/',dataSet,'_',perturbMove,'.nex_varExpVal.1.nex.'))
#find title of nexus file within output
str_extract_all(outFile,'Executing file')  ##'Executing file ./ddn/data/dxsb43/mutate',dataSet,'/',dataSet,'_',perturbMove,'/',dataSet,'_',perturbMove,'.nex_varExpVal.1.nex.'
#find title of nexus file within output
str_match_all(outFile,'Executing file')  ##'Executing file ./ddn/data/dxsb43/mutate',dataSet,'/',dataSet,'_',perturbMove,'/',dataSet,'_',perturbMove,'.nex_varExpVal.1.nex.'
#find title of nexus file within output
str_match(outFile,'Executing file')  ##'Executing file ./ddn/data/dxsb43/mutate',dataSet,'/',dataSet,'_',perturbMove,'/',dataSet,'_',perturbMove,'.nex_varExpVal.1.nex.'
#find title of nexus file within output
str_match_first(outFile,'Executing file')  ##'Executing file ./ddn/data/dxsb43/mutate',dataSet,'/',dataSet,'_',perturbMove,'/',dataSet,'_',perturbMove,'.nex_varExpVal.1.nex.'
str(outFile)
length(outFile)
length(outFile)/20
split(outFile, ceiling(seq_along(outFile)/8835))
splits <- split(outFile, ceiling(seq_along(outFile)/8835))
View(splits)
outFile <- scan(ourFile)
outFile <- read.table(ourFile)
require(readr)
install.packages("readr")
require(readr)
outFiles <- read_file(ourFile)
head(outFile)
str(outFile)
outFile <- read_file(ourFile)
str(outFile)
