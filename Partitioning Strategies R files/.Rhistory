hyochars <- read.csv("./HyolithCharacters.csv")
input.dataset <- "./HyolithCharacters.csv"
hyochars <- read.csv(input.dataset)
data.set <- read.csv(input.dataset)
#get partition names
partition.levels <- levels(data.set$neomorphic.transformational)
get.levels <- function(part.strat) {
partition.levels <- levels(data.set$part.strat)
}
get.levels(body.region)
body.region.levels <- get.levels(body.region)
data.set$body.region
part.strat <- body.region
part.strat <- "body.region"
data.set$part.strat
part.strat <- c("body.region")
data.set$part.strat[1]
body.region.levels <- get.levels(body.region)
View(data.set)
hyochars %>% sapply(levels)
library(dplyr)
require(dplyr)
install.packages("dplyr")
hyochars %>% sapply(levels)
require(dplyr)
hyochars %>% sapply(levels)
get.levels.2 <- function(part.strat) {
hyochars$part.strat %>% sapply(levels)
}
get.levels.2(body.region)
get.levels.2 <- function(part.strat) {
paste("hyochars$", part.strat, sep="") %>% sapply(levels)
}
get.levels.2(body.region)
get.levels.2("body.region")
paste("hyochars$", part.strat, sep="")
parse(text=paste("hyochars$", part.strat, sep=""))
get.levels.2 <- function(part.strat) {
parse(text=paste("hyochars$", part.strat, sep="")) %>% sapply(levels)
}
get.levels.2("body.region")
get.levels.2 <- function(part.strat) {
eval(parse(text=paste("hyochars$", part.strat, sep=""))) %>% sapply(levels)
}
get.levels.2("body.region")
get.levels.2 <- function(part.strat) {
as.vector(eval(parse(text=paste("hyochars$", part.strat, sep="")))) %>% sapply(levels)
}
get.levels.2("body.region")
quote(paste0("hyochars$", part.strat, sep=""))
paste0("hyochars$", part.strat, sep="")
eval(paste0("hyochars$", part.strat, sep=""))
as.name(paste0("hyochars$", part.strat, sep=""))
get.levels.2 <- function(part.strat) {
as.name(paste0("hyochars$", part.strat, sep="")) %>% sapply(levels)
}
get.levels.2("body.region")
get.levels.2 <- function(part.strat) {
column.name <- as.name(paste0("hyochars$", part.strat, sep=""))
column.name %>% sapply(levels)
}
get.levels.2("body.region")
column.name
column.name
column.name <- as.name(paste0("hyochars$", part.strat, sep=""))
get.levels.2 <- function(part.strat) {
column.name <- as.name(paste0("hyochars$", part.strat, sep=""))
levels(column.name)
}
get.levels.2("body.region")
get.char.vector <- function(level) {
hyochars$char.no[hyochars$neomorphic.transformational==level]
}
sapply(partition.levels,
FUN=get.char.vector)
partition.levels <- levels(data.set$body.region)
#input data
input.dataset <- "./HyolithCharacters.csv"
data.set <- read.csv(input.dataset)
partition.levels <- levels(data.set$body.region)
part1 <- "body.region"
partition.levels <- levels(data.set$part1)
partition.levels.1 <- levels(data.set$part1)
#input data
input.dataset <- "./HyolithCharacters.csv"
data.set <- read.csv(input.dataset)
part1 <- "body.region"
partition.levels.1 <- levels(data.set$part1)
data.set$part1
paste0("data.set$", part1)
as.name(paste0("data.set$", part1))
levels(as.name(paste0("data.set$", part1)))
substitute(paste0("data.set$", part1))
quote(paste0("data.set$", part1))
type(data.set$body.region)
is.vector(data.set$body.region)
is(data.set$body.region)
#get vector of character no. for each partition name
get.char.vector <- function(partition) {
partition.levels <- levels(data.set$partition)
sapply(partition.levels,
FUN=function(level) {
hyochars$char.no[hyochars$neomorphic.transformational==level]
})
}
part1 <- "body.region"
partition.levels.1 <- levels(quote(paste0("data.set$", part1)))
#more abstracted
get.char.vector2 <- function(level, part.strat) { #level == which partition's vector I want
hyochars$char.no[hyochars$part.strat==level]    #part.strat == the partitioning strategy the level is from
}
get.char.vector2("transformational", part.strat = "neomorphic.transformational")
#more abstracted
get.char.vector2 <- function(level, part.strat) { #level == which partition's vector I want
data.set$char.no[data.set$part.strat==level]    #part.strat == the partitioning strategy the level is from
}
get.char.vector2("transformational", part.strat = "neomorphic.transformational")
#get vector of character no. for each partition name
get.char.vector <- function(partition) {
partition.levels <- levels(data.set$partition)
sapply(partition.levels,
FUN=function(level) {
data.set$char.no[data.set$partition==level]
})
}
get(paste0("data.set$", part1))
get("data.set$body.region")
#try out get()
tryget <- function(df) {
get(df)
}
tryget("data.set")
tryget("data.set$body.region")
tryget("data.set[8]")
paste0("data.set$", part1)
get(paste0("data.set$", part1))
data.set$body.region
get(data.set$body.region)
get("data.set$body.region")
input.dataset <- "./HyolithCharacters.csv"
data.set <- read.csv(input.dataset)
#get partition names
partition.levels.neotrans <- levels(data.set$neomorphic.transformational)
get.char.vector <- function(level) {
data.set$char.no[data.set$neomorphic.transformational==level]
}
sapply(partition.levels,
FUN=get.char.vector)
#get partition names
partition.levels <- levels(data.set$neomorphic.transformational)
sapply(partition.levels,
FUN=get.char.vector)
is(sapply(partition.levels,
FUN=get.char.vector))
as.array(sapply(partition.levels,
FUN=get.char.vector))
char.vector.array <- as.array(sapply(partition.levels,
FUN=get.char.vector))
is(char.vector.array)
View(char.vector.array)
is.array(sapply(partition.levels,
FUN=get.char.vector))
is.array(as.array(sapply(partition.levels,
FUN=get.char.vector)))
char.vector.list <- sapply(partition.levels,
FUN=get.char.vector)
View(char.vector.list)
char.vector.array <- as.array(sapply(partition.levels,
FUN=get.char.vector))
is.array(char.vector.list)
is.array(char.vector.array)
#get partition names
partition.levels <- levels(data.set$body.region)  #change column name
get.char.vector <- function(level) {
data.set$char.no[data.set$body.region==level] #change column name
}
#output as array
char.vector.array <- as.array(sapply(partition.levels,
FUN=get.char.vector))
View(char.vector.array)
#print results
print(char.vector.array[1])
#print results
print(char.vector.array[2])
#print results
print(char.vector.array[3])
#print results
print(char.vector.array[4])
#print results
print(char.vector.array[5])
#print results
print(char.vector.array[6])
#print results
print(char.vector.array[7])
#print results
print(char.vector.array[8])
hist(char.vector.array)
View(char.vector.array)
hist(char.vector.array[,3])
hist(char.vector.array[3])
char.vector.array[3]
hist(length(char.vector.array))
length(char.vector.array)
#histogram of partition sizes
apply(char.vector.array, 1, length)
#histogram of partition sizes
lapply(char.vector.array, length)
%>% hist
#histogram of partition sizes
require(dplyr)
lapply(char.vector.array, length)
%>% hist
hist(lapply(char.vector.array, length))
plot(lapply(char.vector.array, length))
vapply(char.vector.array, length)
vapply(char.vector.array, length, FUN.VALUE=vector)
vapply(char.vector.array, length, FUN.VALUE=numeric(8))
vapply(char.vector.array, length, FUN.VALUE=numeric(1))
part.lengths <- vapply(char.vector.array, length, FUN.VALUE=numeric(1))
hist(part.lengths)
plot(part.lengths)
str(part.lengths)
read.table(".\tests\hyo\dev16")
read.table("./tests/hyo/dev16")
read.table("../tests/hyo/dev16")
read.table(file="../tests/hyo/dev16")
read.table(file="C:\Users\dxsb43\GitHub\Partitioning_Strategies\tests\hyo\dev16")
read.table(file="../tests/hyo/dev16/hyo_dev16_ss.nex.ss")
read.table(file="../tests/hyo/dev16/hyo_dev16_ss.nex.ss", skip=6)
install.packages("phytools")
str(tree)
tree <-    tree gen.0 = [&U] (21:2.000000e-02,(((32:2.000000e-02,13:2.000000e-02):2.000000e-02,5:2.000000e-02):2.000000e-02,(46:2.000000e-02,(((31:2.000000e-02,(44:2.000000e-02,30:2.000000e-02):2.000000e-02):2.000000e-02,23:2.000000e-02):2.000000e-02,(38:2.000000e-02,(((49:2.000000e-02,34:2.000000e-02):2.000000e-02,(25:2.000000e-02,7:2.000000e-02):2.000000e-02):2.000000e-02,(52:2.000000e-02,((9:2.000000e-02,2:2.000000e-02):2.000000e-02,(42:2.000000e-02,(26:2.000000e-02,(39:2.000000e-02,(37:2.000000e-02,(50:2.000000e-02,(((24:2.000000e-02,((48:2.000000e-02,36:2.000000e-02):2.000000e-02,19:2.000000e-02):2.000000e-02):2.000000e-02,18:2.000000e-02):2.000000e-02,((12:2.000000e-02,(17:2.000000e-02,((54:2.000000e-02,22:2.000000e-02):2.000000e-02,(((28:2.000000e-02,11:2.000000e-02):2.000000e-02,6:2.000000e-02):2.000000e-02,4:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02,((45:2.000000e-02,33:2.000000e-02):2.000000e-02,(14:2.000000e-02,(16:2.000000e-02,(47:2.000000e-02,(27:2.000000e-02,(((53:2.000000e-02,43:2.000000e-02):2.000000e-02,((41:2.000000e-02,(29:2.000000e-02,20:2.000000e-02):2.000000e-02):2.000000e-02,8:2.000000e-02):2.000000e-02):2.000000e-02,(40:2.000000e-02,(((51:2.000000e-02,15:2.000000e-02):2.000000e-02,10:2.000000e-02):2.000000e-02,(35:2.000000e-02,3:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02,1:2.000000e-02);
tree <- (21:2.000000e-02,(((32:2.000000e-02,13:2.000000e-02):2.000000e-02,5:2.000000e-02):2.000000e-02,(46:2.000000e-02,(((31:2.000000e-02,(44:2.000000e-02,30:2.000000e-02):2.000000e-02):2.000000e-02,23:2.000000e-02):2.000000e-02,(38:2.000000e-02,(((49:2.000000e-02,34:2.000000e-02):2.000000e-02,(25:2.000000e-02,7:2.000000e-02):2.000000e-02):2.000000e-02,(52:2.000000e-02,((9:2.000000e-02,2:2.000000e-02):2.000000e-02,(42:2.000000e-02,(26:2.000000e-02,(39:2.000000e-02,(37:2.000000e-02,(50:2.000000e-02,(((24:2.000000e-02,((48:2.000000e-02,36:2.000000e-02):2.000000e-02,19:2.000000e-02):2.000000e-02):2.000000e-02,18:2.000000e-02):2.000000e-02,((12:2.000000e-02,(17:2.000000e-02,((54:2.000000e-02,22:2.000000e-02):2.000000e-02,(((28:2.000000e-02,11:2.000000e-02):2.000000e-02,6:2.000000e-02):2.000000e-02,4:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02,((45:2.000000e-02,33:2.000000e-02):2.000000e-02,(14:2.000000e-02,(16:2.000000e-02,(47:2.000000e-02,(27:2.000000e-02,(((53:2.000000e-02,43:2.000000e-02):2.000000e-02,((41:2.000000e-02,(29:2.000000e-02,20:2.000000e-02):2.000000e-02):2.000000e-02,8:2.000000e-02):2.000000e-02):2.000000e-02,(40:2.000000e-02,(((51:2.000000e-02,15:2.000000e-02):2.000000e-02,10:2.000000e-02):2.000000e-02,(35:2.000000e-02,3:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02,1:2.000000e-02);
tree <- read.tree(text = "(21:2.000000e-02,(((32:2.000000e-02,13:2.000000e-02):2.000000e-02,5:2.000000e-02):2.000000e-02,(46:2.000000e-02,(((31:2.000000e-02,(44:2.000000e-02,30:2.000000e-02):2.000000e-02):2.000000e-02,23:2.000000e-02):2.000000e-02,(38:2.000000e-02,(((49:2.000000e-02,34:2.000000e-02):2.000000e-02,(25:2.000000e-02,7:2.000000e-02):2.000000e-02):2.000000e-02,(52:2.000000e-02,((9:2.000000e-02,2:2.000000e-02):2.000000e-02,(42:2.000000e-02,(26:2.000000e-02,(39:2.000000e-02,(37:2.000000e-02,(50:2.000000e-02,(((24:2.000000e-02,((48:2.000000e-02,36:2.000000e-02):2.000000e-02,19:2.000000e-02):2.000000e-02):2.000000e-02,18:2.000000e-02):2.000000e-02,((12:2.000000e-02,(17:2.000000e-02,((54:2.000000e-02,22:2.000000e-02):2.000000e-02,(((28:2.000000e-02,11:2.000000e-02):2.000000e-02,6:2.000000e-02):2.000000e-02,4:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02,((45:2.000000e-02,33:2.000000e-02):2.000000e-02,(14:2.000000e-02,(16:2.000000e-02,(47:2.000000e-02,(27:2.000000e-02,(((53:2.000000e-02,43:2.000000e-02):2.000000e-02,((41:2.000000e-02,(29:2.000000e-02,20:2.000000e-02):2.000000e-02):2.000000e-02,8:2.000000e-02):2.000000e-02):2.000000e-02,(40:2.000000e-02,(((51:2.000000e-02,15:2.000000e-02):2.000000e-02,10:2.000000e-02):2.000000e-02,(35:2.000000e-02,3:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02,1:2.000000e-02);")
library(phytools)
install.packages("phytools")
tree <- read.tree(text = "(21:2.000000e-02,(((32:2.000000e-02,13:2.000000e-02):2.000000e-02,5:2.000000e-02):2.000000e-02,(46:2.000000e-02,(((31:2.000000e-02,(44:2.000000e-02,30:2.000000e-02):2.000000e-02):2.000000e-02,23:2.000000e-02):2.000000e-02,(38:2.000000e-02,(((49:2.000000e-02,34:2.000000e-02):2.000000e-02,(25:2.000000e-02,7:2.000000e-02):2.000000e-02):2.000000e-02,(52:2.000000e-02,((9:2.000000e-02,2:2.000000e-02):2.000000e-02,(42:2.000000e-02,(26:2.000000e-02,(39:2.000000e-02,(37:2.000000e-02,(50:2.000000e-02,(((24:2.000000e-02,((48:2.000000e-02,36:2.000000e-02):2.000000e-02,19:2.000000e-02):2.000000e-02):2.000000e-02,18:2.000000e-02):2.000000e-02,((12:2.000000e-02,(17:2.000000e-02,((54:2.000000e-02,22:2.000000e-02):2.000000e-02,(((28:2.000000e-02,11:2.000000e-02):2.000000e-02,6:2.000000e-02):2.000000e-02,4:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02,((45:2.000000e-02,33:2.000000e-02):2.000000e-02,(14:2.000000e-02,(16:2.000000e-02,(47:2.000000e-02,(27:2.000000e-02,(((53:2.000000e-02,43:2.000000e-02):2.000000e-02,((41:2.000000e-02,(29:2.000000e-02,20:2.000000e-02):2.000000e-02):2.000000e-02,8:2.000000e-02):2.000000e-02):2.000000e-02,(40:2.000000e-02,(((51:2.000000e-02,15:2.000000e-02):2.000000e-02,10:2.000000e-02):2.000000e-02,(35:2.000000e-02,3:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02,1:2.000000e-02);")
plot(tree,type='cladogram',edge.width = 2)
tree <- read.newick(text ="(21:2.000000e-02,(((32:2.000000e-02,13:2.000000e-02):2.000000e-02,5:2.000000e-02):2.000000e-02,(46:2.000000e-02,(((31:2.000000e-02,(44:2.000000e-02,30:2.000000e-02):2.000000e-02):2.000000e-02,23:2.000000e-02):2.000000e-02,(38:2.000000e-02,(((49:2.000000e-02,34:2.000000e-02):2.000000e-02,(25:2.000000e-02,7:2.000000e-02):2.000000e-02):2.000000e-02,(52:2.000000e-02,((9:2.000000e-02,2:2.000000e-02):2.000000e-02,(42:2.000000e-02,(26:2.000000e-02,(39:2.000000e-02,(37:2.000000e-02,(50:2.000000e-02,(((24:2.000000e-02,((48:2.000000e-02,36:2.000000e-02):2.000000e-02,19:2.000000e-02):2.000000e-02):2.000000e-02,18:2.000000e-02):2.000000e-02,((12:2.000000e-02,(17:2.000000e-02,((54:2.000000e-02,22:2.000000e-02):2.000000e-02,(((28:2.000000e-02,11:2.000000e-02):2.000000e-02,6:2.000000e-02):2.000000e-02,4:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02,((45:2.000000e-02,33:2.000000e-02):2.000000e-02,(14:2.000000e-02,(16:2.000000e-02,(47:2.000000e-02,(27:2.000000e-02,(((53:2.000000e-02,43:2.000000e-02):2.000000e-02,((41:2.000000e-02,(29:2.000000e-02,20:2.000000e-02):2.000000e-02):2.000000e-02,8:2.000000e-02):2.000000e-02):2.000000e-02,(40:2.000000e-02,(((51:2.000000e-02,15:2.000000e-02):2.000000e-02,10:2.000000e-02):2.000000e-02,(35:2.000000e-02,3:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02,1:2.000000e-02);")
library(phytools)
tree <- read.newick(text ="(21:2.000000e-02,(((32:2.000000e-02,13:2.000000e-02):2.000000e-02,5:2.000000e-02):2.000000e-02,(46:2.000000e-02,(((31:2.000000e-02,(44:2.000000e-02,30:2.000000e-02):2.000000e-02):2.000000e-02,23:2.000000e-02):2.000000e-02,(38:2.000000e-02,(((49:2.000000e-02,34:2.000000e-02):2.000000e-02,(25:2.000000e-02,7:2.000000e-02):2.000000e-02):2.000000e-02,(52:2.000000e-02,((9:2.000000e-02,2:2.000000e-02):2.000000e-02,(42:2.000000e-02,(26:2.000000e-02,(39:2.000000e-02,(37:2.000000e-02,(50:2.000000e-02,(((24:2.000000e-02,((48:2.000000e-02,36:2.000000e-02):2.000000e-02,19:2.000000e-02):2.000000e-02):2.000000e-02,18:2.000000e-02):2.000000e-02,((12:2.000000e-02,(17:2.000000e-02,((54:2.000000e-02,22:2.000000e-02):2.000000e-02,(((28:2.000000e-02,11:2.000000e-02):2.000000e-02,6:2.000000e-02):2.000000e-02,4:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02,((45:2.000000e-02,33:2.000000e-02):2.000000e-02,(14:2.000000e-02,(16:2.000000e-02,(47:2.000000e-02,(27:2.000000e-02,(((53:2.000000e-02,43:2.000000e-02):2.000000e-02,((41:2.000000e-02,(29:2.000000e-02,20:2.000000e-02):2.000000e-02):2.000000e-02,8:2.000000e-02):2.000000e-02):2.000000e-02,(40:2.000000e-02,(((51:2.000000e-02,15:2.000000e-02):2.000000e-02,10:2.000000e-02):2.000000e-02,(35:2.000000e-02,3:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02,1:2.000000e-02);")
plotTree(tree)
require('readr')
syll_unpart <- read_file(file="C:/Users/dxsb43/GitHub/Partitioning_Strategies/tests/syll/syll_unpart_brlens1.nex.run8.t")
test <- "gen.0 = [&U] ((45:2.000000e-02,(55:2.000000e-02,(((61:2.000000e-02,40:2.000000e-02):2.000000e-02,30:2.000000e-02):2.000000e-02,(((62:2.000000e-02,20:2.000000e-02):2.000000e-02,(57:2.000000e-02,(51:2.000000e-02,10:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02"
result1 <- str_replace(test, ":.*,", ":1,")
require('readr')
syll_unpart <- read_file(file="C:/Users/dxsb43/GitHub/Partitioning_Strategies/tests/syll/syll_unpart_brlens1.nex.run8.t")
test <- "gen.0 = [&U] ((45:2.000000e-02,(55:2.000000e-02,(((61:2.000000e-02,40:2.000000e-02):2.000000e-02,30:2.000000e-02):2.000000e-02,(((62:2.000000e-02,20:2.000000e-02):2.000000e-02,(57:2.000000e-02,(51:2.000000e-02,10:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02"
result1 <- str_replace(test, ":.*,", ":1,")
require('stringr')
syll_unpart <- read_file(file="C:/Users/dxsb43/GitHub/Partitioning_Strategies/tests/syll/syll_unpart_brlens1.nex.run8.t")
test <- "gen.0 = [&U] ((45:2.000000e-02,(55:2.000000e-02,(((61:2.000000e-02,40:2.000000e-02):2.000000e-02,30:2.000000e-02):2.000000e-02,(((62:2.000000e-02,20:2.000000e-02):2.000000e-02,(57:2.000000e-02,(51:2.000000e-02,10:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02"
result1 <- str_replace(test, ":.*,", ":1,")
result2 <- str_replace(result1, ":.*)", ":1)")
result2 <- str_replace(result1, ":.*\)", ":1)")
result2 <- str_replace(result1, ":.*\\)", ":1)")
print(result2)
require('stringr')
syll_unpart <- read_file(file="C:/Users/dxsb43/GitHub/Partitioning_Strategies/tests/syll/syll_unpart_brlens1.nex.run8.t")
test <- "gen.0 = [&U] ((45:2.000000e-02,(55:2.000000e-02,(((61:2.000000e-02,40:2.000000e-02):2.000000e-02,30:2.000000e-02):2.000000e-02,(((62:2.000000e-02,20:2.000000e-02):2.000000e-02,(57:2.000000e-02,(51:2.000000e-02,10:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02"
result1 <- str_replace_all(test, ":.*,", ":1,")
#result2 <- str_replace_all(result1, ":.*\\)", ":1)")
print(result1)
result2 <- str_replace_all(result1, ":.*\\)", ":1)")
print(result2)
test <- "gen.0 = [&U] ((45:2.000000e-02,(55:2.000000e-02,(((61:2.000000e-02,40:2.000000e-02):2.000000e-02,30:2.000000e-02):2.000000e-02,(((62:2.000000e-02,20:2.000000e-02):2.000000e-02,(57:2.000000e-02,(51:2.000000e-02,10:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02"
result1 <- str_replace_all(test, ":.{12},", ":1,")
#result2 <- str_replace_all(result1, ":.{12}\\)", ":1)")
print(result1)
result2 <- str_replace_all(result1, ":.{12}\\)", ":1)")
print(result2)
syll_unpart <- read_file(file="C:/Users/dxsb43/GitHub/Partitioning_Strategies/tests/syll/syll_unpart_ss.nex.run8.t")
test <- "gen.0 = [&U] ((45:2.000000e-02,(55:2.000000e-02,(((61:2.000000e-02,40:2.000000e-02):2.000000e-02,30:2.000000e-02):2.000000e-02,(((62:2.000000e-02,20:2.000000e-02):2.000000e-02,(57:2.000000e-02,(51:2.000000e-02,10:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02"
result1 <- str_replace_all(syll_unpart, ":.{12},", ":1,")
result2 <- str_replace_all(result1, ":.{12}\\)", ":1)")
write_file(result2, path="C:/Users/dxsb43/GitHub/Partitioning_Strategies/tests/syll/syll_unpart_brlens1.nex.run8.t")
require('readr')
syll_unpart <- read_file(file="C:/Users/dxsb43/GitHub/Partitioning_Strategies/tests/syll/syll_unpart_ss.nex.run8.t")
test <- "gen.0 = [&U] ((45:2.000000e-02,(55:2.000000e-02,(((61:2.000000e-02,40:2.000000e-02):2.000000e-02,30:2.000000e-02):2.000000e-02,(((62:2.000000e-02,20:2.000000e-02):2.000000e-02,(57:2.000000e-02,(51:2.000000e-02,10:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02"
result1 <- str_replace_all(syll_unpart, ":.{12},", ":1,")
result2 <- str_replace_all(result1, ":.{12}\\)", ":1)")
write_file(result2, path="C:/Users/dxsb43/GitHub/Partitioning_Strategies/tests/syll/syll_unpart_brlens1.nex.run8.t")
#print results
print(char.vector.array[8])
#read in data
input.dataset <- "./SyllidaeCharacters.csv" #***change file to needed data set in .csv format***
data.set <- read.csv(input.dataset)
#read in data
input.dataset <- "./SyllidaeCharacters.csv" #***change file to needed data set in .csv format***
data.set <- read.csv(input.dataset)
#get partition names
partition.levels <- levels(data.set$body.region)  #***change $column name***
get.char.vector <- function(level) {
data.set$char.no[data.set$body.region==level] #***change $column name***
}
#output as array
char.vector.array <- as.array(sapply(partition.levels,
FUN=get.char.vector))
#print results
print(char.vector.array[8])
View(char.vector.list)
View(char.vector.array)
View(char.vector.list)
#read in data
input.dataset <- "./SyllidaeCharacters.csv" #***change file to needed data set in .csv format***
data.set <- read.csv(input.dataset)
View(data.set)
#read in data
input.dataset <- "./SyllidaeCharacters.csv" #***change file to needed data set in .csv format***
data.set <- read.csv(input.dataset)
#get partition names
partition.levels <- levels(data.set$body.region)  #***change $column name***
get.char.vector <- function(level) {
data.set$char.no[data.set$body.region==level] #***change $column name***
}
View(get.char.vector)
data.set <- read.csv(input.dataset)
#get partition names
partition.levels <- levels(data.set$body.region)  #***change $column name***
get.char.vector <- function(level) {
data.set$char.no[data.set$body.region==level] #***change $column name***
}
#output as array
char.vector.array <- as.array(sapply(partition.levels,
FUN=get.char.vector))
#print results
print(char.vector.array[8])
View(char.vector.array)
get.char.vector <- function(level) {
data.set$char.no[data.set$body.region==level] #***change $column name***
}
View(get.char.vector)
View(get.char.vector2)
View(get.char.vector)
View(get.char.vector2)
#read in data
input.dataset <- "./SyllidaeCharacters.csv" #***change file to needed data set in .csv format***
data.set <- read.csv(input.dataset)
#get partition names
partition.levels <- levels(data.set$body.region)  #***change $column name***
#read in data
input.dataset <- "./SyllidaeCharacters.csv" #***change file to needed data set in .csv format***
data.set <- read.csv(input.dataset)
#get partition names
partition.levels <- levels(data.set$body.region)  #***change $column name***
get.char.vector <- function(level) {
data.set$char.no[data.set$body.region==level] #***change $column name***
}
#output as array
char.vector.array <- as.array(sapply(partition.levels,
FUN=get.char.vector))
#print results
print(char.vector.array[8])
View(char.vector.list)
View(char.vector.array)
View(char.vector.list)
#read in data
input.dataset <- "./SyllidaeCharacters.csv" #***change file to needed data set in .csv format***
data.set <- read.csv(input.dataset)
View(data.set)
#get partition names
partition.levels <- levels(data.set$body.region)  #***change $column name***
get.char.vector <- function(level) {
data.set$char.no[data.set$body.region==level] #***change $column name***
}
#output as array
char.vector.array <- as.array(sapply(partition.levels,
FUN=get.char.vector))
#print results
print(char.vector.array[8])
View(char.vector.array)
#print results
print(char.vector.array)
#read in data
input.dataset <- "./SyllidaeCharacters.csv" #***change file to needed data set in .csv format***
data.set <- read.csv(input.dataset)
#get partition names
partition.levels <- levels(data.set$neotrans)  #***change $column name***
get.char.vector <- function(level) {
data.set$char.no[data.set$neotrans==level] #***change $column name***
}
#output as array
char.vector.array <- as.array(sapply(partition.levels,
FUN=get.char.vector))
#print results
print(char.vector.array)
#get partition names
partition.levels <- levels(data.set$neotrans)  #***change $column name***
get.char.vector <- function(level) {
data.set$char.no[data.set$neotrans==level] #***change $column name***
}
#output as array
char.vector.array <- as.array(sapply(partition.levels,
FUN=get.char.vector))
#print results
print(char.vector.array)
#read in data
input.dataset <- "./SyllidaeCharacters.csv" #***change file to needed data set in .csv format***
data.set <- read.csv(input.dataset)
#get partition names
partition.levels <- levels(data.set$neotrans)  #***change $column name***
get.char.vector <- function(level) {
data.set$char.no[data.set$neotrans==level] #***change $column name***
}
#output as array
char.vector.array <- as.array(sapply(partition.levels,
FUN=get.char.vector))
#print results
print(char.vector.array)
#histogram of partition sizes
#vector of partition names and no. of characters in each
part.lengths <- vapply(char.vector.array, length, FUN.VALUE=numeric(1))
#plot dotplot
plot(part.lengths)
str(part.lengths)
require('stringr')
require('readr')
raw_data <- read_file(file="C:/Users/dxsb43/GitHub/Partitioning_Strategies/tests/hyo/hyo_unpartFPexpdownT_ss.nex.run8.t")
raw_data <- read_file(file="C:/Users/dxsb43/GitHub/Partitioning_Strategies/tests/hyo/unpart+/hyo_unpartFPexpdownT_ss.nex.run8.t")
test <- "gen.0 = [&U] ((45:2.000000e-02,(55:2.000000e-02,(((61:2.000000e-02,40:2.000000e-02):2.000000e-02,30:2.000000e-02):2.000000e-02,(((62:2.000000e-02,20:2.000000e-02):2.000000e-02,(57:2.000000e-02,(51:2.000000e-02,10:2.000000e-02):2.000000e-02):2.000000e-02):2.000000e-02"
result1 <- str_replace_all(syll_unpart, ":.{12},", ":1,")
result2 <- str_replace_all(result1, ":.{12}\\)", ":1)")
write_file(result2, path="C:/Users/dxsb43/GitHub/Partitioning_Strategies/tests/hyo/unpart+/hyo_unpartFPexpdownT_brlens1.nex.run8.t")
require(quartet)
install.packages("Quartet")
require(Quartet)
n_tips <- 6
AllQuartets(n_tips)
install.packages('ctv')
library('ctv') install.views('Phylogenetics')
library('ctv')
install.views('Phylogenetics')
require(ape)
require(phytools)
detach("package:ape", unload=TRUE)
library("animation", lib.loc="\\\\Hudson/dxsb43/My_Documents/R/win-library/3.5")
tree <- cat(readLines("C:/Users/dxsb43/GitHub/Partitioning_Strategies/Homoplasy Scoring/cea_homk0_5.nex"))
require(phytools)
tree <- cat(readLines("cea_homk0_5.nex"))
tree <- cat(readLines("cea_homk0_5_trees.nex"))
tree <- cat(readLines("cea_homk0_5_trees.nex"), sep = "\n")
setwd("C:/Users/dxsb43/GitHub/Partitioning_Strategies/Homoplasy Scoring")
tree <- cat(readLines("cea_homk0_5_trees.nex"), sep = "\n")
plotTree(tree)
tree <- cat(readLines("cea_homk0_5_tree1.nex"), sep = "\n")
tree <- read.nexus("cea_homk0_5_tree1.nex")
tree <- read.nexus.data("cea_homk0_5_tree1.nex")
tree <- read.nexus.data("cea_homk0_5_tree1.nex")
tree <- read.nexus("cea_homk0_5_tree1.nex")
tree <- read.nexus("cea_homk0_5_trees.nex")
tree <- read.nexus.data("cea_homk0_5_trees.nex")
install.packages("OutbreakTools")
tree <- read.tree("cea_homk0_5_trees.nex")
library("ape", lib.loc="\\\\Hudson/dxsb43/My_Documents/R/win-library/3.5")
tree <- read.tree("cea_homk0_5_trees.nex")
tree <- read.nexus("cea_homk0_5_trees.nex")
require(ape)
data(carnivora)
carn <- data(carnivora)
View(carnivora)
str(carn)
frm <- ~SuperFamily/Family/Genus/Species
tr <- as.phylo(frm, data=carnivora)
plot(tr)
geo <- read.nexus("Geospiza.nex")
geo <- read.nexus("Geospiza.nex")
plot(geo)
View(geo)
geo2 <- read.nexus("Geospiza2.nex")
trees <- [geo, geo2]
trees <- (geo, geo2)
trees <- list(geo, geo2)
QuartetStatus(trees)
n_tips <- 14
AllQuartets(n_tips)
QuartetStatus(trees)
QStrees <- QuartetStatus(trees)
SimilarityMetrics(QStrees)
geo2 <- read.nexus("Geospiza2.nex")
trees <- list(geo, geo2) #QuartetStatus needs all trees in a list. Each tree is compared to the first one
QStrees <- QuartetStatus(trees)
SimilarityMetrics(QStrees)
install.packages('ctv')
library('ctv')
install.views('Phylogenetics')
require(ape)
require(phytools)
require(Quartet)
trees <- read.nexus("CompareCEA.nex")
trees <- read.nexus("CompareCEA.nex")
setwd("C:/Users/dxsb43/GitHub/Partitioning_Strategies/mutations")
trees <- read.nexus("CompareCEA.nex")
